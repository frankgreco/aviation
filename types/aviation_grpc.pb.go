// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SuggestionServiceClient is the client API for SuggestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuggestionServiceClient interface {
	ListSuggestions(ctx context.Context, in *ListSuggestionsRequest, opts ...grpc.CallOption) (*ListSuggestionsReply, error)
}

type suggestionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSuggestionServiceClient(cc grpc.ClientConnInterface) SuggestionServiceClient {
	return &suggestionServiceClient{cc}
}

func (c *suggestionServiceClient) ListSuggestions(ctx context.Context, in *ListSuggestionsRequest, opts ...grpc.CallOption) (*ListSuggestionsReply, error) {
	out := new(ListSuggestionsReply)
	err := c.cc.Invoke(ctx, "/types.SuggestionService/ListSuggestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuggestionServiceServer is the server API for SuggestionService service.
// All implementations must embed UnimplementedSuggestionServiceServer
// for forward compatibility
type SuggestionServiceServer interface {
	ListSuggestions(context.Context, *ListSuggestionsRequest) (*ListSuggestionsReply, error)
	mustEmbedUnimplementedSuggestionServiceServer()
}

// UnimplementedSuggestionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSuggestionServiceServer struct {
}

func (UnimplementedSuggestionServiceServer) ListSuggestions(context.Context, *ListSuggestionsRequest) (*ListSuggestionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuggestions not implemented")
}
func (UnimplementedSuggestionServiceServer) mustEmbedUnimplementedSuggestionServiceServer() {}

// UnsafeSuggestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuggestionServiceServer will
// result in compilation errors.
type UnsafeSuggestionServiceServer interface {
	mustEmbedUnimplementedSuggestionServiceServer()
}

func RegisterSuggestionServiceServer(s grpc.ServiceRegistrar, srv SuggestionServiceServer) {
	s.RegisterService(&_SuggestionService_serviceDesc, srv)
}

func _SuggestionService_ListSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionServiceServer).ListSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.SuggestionService/ListSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionServiceServer).ListSuggestions(ctx, req.(*ListSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SuggestionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.SuggestionService",
	HandlerType: (*SuggestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSuggestions",
			Handler:    _SuggestionService_ListSuggestions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aviation.proto",
}
